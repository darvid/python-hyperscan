[project]
name = "hyperscan"
version = "0.7.9"
description = "Python bindings for Hyperscan."
readme = "README.md"
authors = [{ name = "David Gidwani", email = "david.gidwani@atomweight.io" }]
requires-python = ">=3.9,<4.0"
license = { text = "MIT" }
keywords = ["regex", "hypercan"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
]
dependencies = []

[project.urls]
Homepage = "https://github.com/darvid/python-hyperscan"
Repository = "https://github.com/darvid/python-hyperscan"
Documentation = "https://python-hyperscan.readthedocs.io/en/latest/"

[build-system]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
build-dir = "build/{wheel_tag}"
sdist.cmake = false
build.targets = ["hs_python_extension"]
build.verbose = true
logging.level = "DEBUG"
wheel.expand-macos-universal-tags = true
wheel.packages = ["src/hyperscan", "hyperscan._hyperscan"]
install.components = ["hyperscan"]

[tool.scikit-build.cmake]
build-type = "MinSizeRel"
version = ">=3.31"

[tool.cibuildwheel]
build-frontend = "build[uv]"
test-command = "pytest --pyargs {package}/tests -vvv"
# test-command = "bash {project}/build_tools/wheels/test_wheels.sh {project}"
test-requires = ["pytest>=7.0", "pytest-mock"]
# Will avoid testing on emulated architectures and macOS Apple silicon
test-skip = "*-*linux_{ppc64le,s390x} *-macosx_arm64"

[tool.cibuildwheel.linux]
before-all = ["yum -y update", """yum -y install \
  autoconf \
  cmake \
  gcc \
  gcc-c++ \
  glibc-static \
  libstdc++-static \
  ragel \
  zlib-devel \
  """]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"
environment-pass = ["CI"]
manylinux-x86_64-image = "manylinux2014"
manylinux-pypy_x86_64-image = "manylinux2014"
musllinux-x86_64-image = "musllinux_1_2"
musllinux-aarch64-image = "musllinux_1_2"

[[tool.cibuildwheel.overrides]]
select = "*-musllinux*"
before-all = """apk add -U \
  clang \
  clang-dev \
  gcc \
  g++ \
  libstdc++ \
  libstdc++-dev \
  cmake \
  autoconf \
  ragel"""

[[tool.cibuildwheel.overrides]]
select = "*-manylinux_aarch64*"
before-all = [
  "yum -y update",
  "yum install -y epel-release",
  """yum -y install \
  autoconf \
  cmake \
  gcc \
  gcc-c++ \
  glibc-static \
  libstdc++-static \
  ragel \
  zlib-devel \
  """,
]

[tool.cibuildwheel.linux.environment]
SKBUILD_VERBOSE = "1"

[tool.cibuildwheel.macos]
before-all = "brew install ragel"
repair-wheel-command = "delocate-wheel --sanitize-rpaths --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.macos.environment]
LD_LIBRARY_PATH = "/opt/vectorscan/lib:/usr/local/lib"
LIBRARY_PATH = "/opt/vectorscan/lib:/usr/local/lib"
DYLD_LIBRARY_PATH = "/opt/vectorscan/lib:/usr/local/lib"
PKG_CONFIG_PATH = "/opt/vectorscan/lib/pkgconfig:/opt/pcre/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
PDM_HOME = "/tmp/pdm"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
before-build = "uv pip install delvewheel"
repair-wheel-command = "delvewheel repair -v --wheel-dir={dest_dir} {wheel}"

[tool.cibuildwheel.windows.config-settings]
# statically link MSVC runtime
# see https://github.com/zeromq/pyzmq/issues/2012
# and https://github.com/matplotlib/matplotlib/pull/28687
"cmake.define.CMAKE_MSVC_RUNTIME_LIBRARY" = "MultiThreaded"
"cmake.define.CMAKE_SHARED_LINKER_FLAGS" = "ucrt.lib;vcruntime.lib;/nodefaultlib:libucrt.lib;/nodefaultlib:libvcruntime.lib"

[tool.semantic_release]
commit_parser = "emoji"
tag_format = "v{version}"
version_variables = ["src/hyperscan/_version.py:__version__"]
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.branches.release]
match = '(main|create-pull-request/patch|release/v?[\\d\\.\\-]+)'
prerelease = false

[tool.semantic_release.commit_parser_options]
major_tags = [":boom:"]
minor_tags = [
  ":sparkles:",
  ":children_`ing:",
  ":lipstick:",
  ":iphone:",
  ":egg:",
  ":chart_with_upwards_trend:",
]
patch_tags = [
  ":ambulance:",
  ":lock:",
  ":bug:",
  ":zap:",
  ":goal_net:",
  ":alien:",
  ":wheelchair:",
  ":speech_balloon:",
  ":mag:",
  ":apple:",
  ":penguin:",
  ":checkered_flag:",
  ":robot:",
  ":green_apple:",
]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*", "wheelhouse/*"]

[dependency-groups]
release = ["python-semantic-release>=9.16.0"]
dev = [
  "cibuildwheel>=2.22.0",
  "isort>=5.13.2",
  "pytest>=7.0",
  "python-semantic-release>=9.16.0",
  "ruff>=0.9.3",
]
test = ["pytest>=8.3.4", "pytest-mock>=3.14.0"]
build = [
  "auditwheel>=6.2.0",
  "cibuildwheel>=2.22.0",
  "delocate>=0.12.0 ; sys_platform == 'darwin'",
  "delvewheel>=1.10.0 ; sys_platform == 'win32'",
]
